name: Pipeline

on:
  push:
    branches:
      - "main"
      - "feature**"
  delete:
    branches:
      - "feature**"

env:
  TEST_DOCKER_REPO_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_CI_ACCESS_KEY_ID }}
  TEST_DOCKER_REPO_USER_ACCESS_SECRET_KEY: ${{ secrets.AWS_ECR_CI_ACCESS_SECRET_KEY }}
  TEST_DOCKER_REPO_EXECUTION_ROLE: arn:aws:iam::149394468567:role/erc-bobsshop-order-service-testing-images-exc-role
  TEST_DOCKER_REPO: 149394468567.dkr.ecr.eu-north-1.amazonaws.com/bobsshop-order-service-testing-images

  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: bobsshop-order-service-dev
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::149394468567:role/aws-sam-cli-managed-dev-pipe-PipelineExecutionRole-1PFB0IHKI0T40
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::149394468567:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-15XPE0Q04LMJE
  TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-artifactsbucket-10x056dcyqxbg
  TESTING_IMAGE_REPOSITORY: 149394468567.dkr.ecr.eu-north-1.amazonaws.com/aws-sam-cli-managed-dev-pipeline-resources-imagerepository-axcqvayqpzmw
  TESTING_REGION: eu-north-1
  PROD_STACK_NAME: bobsshop-order-service-prod
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::149394468567:role/aws-sam-cli-managed-prod-pip-PipelineExecutionRole-1AKNJVLWEHB55
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::149394468567:role/aws-sam-cli-managed-prod-CloudFormationExecutionR-1RESHNNH6ZYZY
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline-artifactsbucket-1wtsyswezl6r
  PROD_IMAGE_REPOSITORY: 149394468567.dkr.ecr.eu-north-1.amazonaws.com/aws-sam-cli-managed-prod-pipeline-resources-imagerepository-jrk8tpuyspfe
  PROD_REGION: eu-north-1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.TEST_DOCKER_REPO_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.TEST_DOCKER_REPO_USER_ACCESS_SECRET_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TEST_DOCKER_REPO_EXECUTION_ROLE }}
          role-session-name: test-building
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: bobsshop-order-service-testing-images
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --target test .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.TEST_DOCKER_REPO_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.TEST_DOCKER_REPO_USER_ACCESS_SECRET_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TEST_DOCKER_REPO_EXECUTION_ROLE }}
          role-session-name: test-building
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: bobsshop-order-service-testing-images
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # unit-test:
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         # trigger the tests here

  # delete-feature:
  #   if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Delete feature branch stack
  #       env:
  #         FEATURE_BRANCH_NAME: ${{ github.event.ref }}
  #       run: |
  #         sam delete \
  #           --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
  #           --region ${TESTING_REGION} \
  #           --no-prompts

  # build-and-deploy-feature:
  #   # this stage is triggered only for feature branches (feature*),
  #   # which will build the stack and deploy to a stack named with branch name.
  #   # https://github.com/actions/setup-python
  #   # https://github.com/aws-actions/configure-aws-credentials#notice-node12-deprecation-warning
  #   if: startsWith(github.ref, 'refs/heads/feature')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true
  #     - run: sam build --template ${SAM_TEMPLATE} --use-container

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: feature-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to feature stack in the testing account
  #       shell: bash
  #       run: |
  #         sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --image-repository ${TESTING_IMAGE_REPOSITORY} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  # integration-test:
  #   if: startsWith(github.ref, 'refs/heads/feature')
  #   needs: [build-and-deploy-feature]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         # trigger the integration tests here

  # build-and-package:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [lint_style_check, unit-test, integration-test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true

  #     - name: Build resources
  #       run: sam build --template ${SAM_TEMPLATE} --use-container

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to testing artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --image-repository ${TESTING_IMAGE_REPOSITORY} \
  #           --region ${TESTING_REGION} \
  #           --output-template-file packaged-testing.yaml

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: packaged-testing.yaml
  #         path: packaged-testing.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to production artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --image-repository ${PROD_IMAGE_REPOSITORY} \
  #           --region ${PROD_REGION} \
  #           --output-template-file packaged-prod.yaml

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: packaged-prod.yaml
  #         path: packaged-prod.yaml

  # deploy-testing:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [build-and-package]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: packaged-testing.yaml

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to testing account
  #       run: |
  #         sam deploy --stack-name ${TESTING_STACK_NAME} \
  #           --template packaged-testing.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --image-repository ${TESTING_IMAGE_REPOSITORY} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  # # DONT DEPLOY TO PROD. WE DONT WANT CONTINUOUS DEPLOYMENT
  # deploy-prod:
  #   if: github.ref == 'refs/heads/main'
  #   needs: [integration-test]
  #   runs-on: ubuntu-latest
  #   # Configure GitHub Action Environment to have a manual approval step before deployment to production
  #   # https://docs.github.com/en/actions/reference/environments
  #   # environment: <configured-environment>
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/setup-sam@v2
  #       with:
  #         use-installer: true
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: packaged-prod.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to production account
  #       run: |
  #         sam deploy --stack-name ${PROD_STACK_NAME} \
  #           --template packaged-prod.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${PROD_REGION} \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --image-repository ${PROD_IMAGE_REPOSITORY} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
